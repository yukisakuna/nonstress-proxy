worker_processes  auto;

events { worker_connections  1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  sendfile      on;

  upstream app_upstream {
    server app:8000;
    keepalive 32;
  }

  # 共通ヘッダ
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  server {
    listen 80 default_server;
    server_name _;

    # FastAPIへ直通させる場所（管理・検証・チャレンジ）
    location ^~ /_health {
      proxy_pass http://app_upstream;
      proxy_set_header Host $host;
    }

    location ^~ /_challenge {
      proxy_pass http://app_upstream;
      proxy_set_header Host $host;
    }

    location ^~ /_verify {
      proxy_pass http://app_upstream;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ^~ /admin/ {
      proxy_pass http://app_upstream;
      proxy_set_header Host $host;
      proxy_set_header Authorization $http_authorization;
    }

    # 認可ゲート（内部）
    location = /_gate {
      internal;
      # オリジナルURIをFastAPIに伝える
      proxy_set_header X-Original-URI $request_uri;
      proxy_set_header Host $host;
      proxy_pass http://app_upstream/_auth;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
    }

    # 通常トラフィック
    location / {
      # まず /_gate（=/_auth）で判定
      auth_request /_gate;

      # /_auth のレスポンスヘッダを変数に取り込む
      auth_request_set $upstream_url  $upstream_http_x_upstream;
      auth_request_set $redirect_url  $upstream_http_x_redirect;

      # 401 が返ってきた時の遷移先
      error_page 401 = @challenge_redirect;

      # 上流へリバースプロキシ
      proxy_http_version 1.1;

      # Host ヘッダは“元のHost”を保持（上流が要求するなら upstream 側に合わせるように main.py を拡張可）
      proxy_set_header Host              $host;
      proxy_set_header X-Real-IP         $remote_addr;
      proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # バッファ系は好みで
      proxy_buffering on;

      # upstream は /_auth が返した URL
      proxy_pass $upstream_url;
    }

    location @challenge_redirect {
      return 302 $redirect_url;
    }
  }
}
